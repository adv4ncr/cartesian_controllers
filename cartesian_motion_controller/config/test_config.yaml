controller_manager:
  ros__parameters:
    update_rate: 250  # Hz

    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

    cartesian_motion_controller:
      type: cartesian_motion_controller/CartesianMotionController

    motion_control_handle:
      type: cartesian_controller_handles/MotionControlHandle

    joint_trajectory_controller:
      type: joint_trajectory_controller/JointTrajectoryController

cartesian_motion_controller:
  ros__parameters:

    # This is the tip of the robot tool that you usually use for your task.
    # For instance, it could be the drilling bit of a screwdriver or a grinding
    # tool.  When you specify a target_wrench, i.e. some additional forces that
    # your robot should apply to its environment, that target_wrench gets
    # applied in this frame.    
    end_effector_link: "tool0"

    # This is usually the link directly before the first actuated joint.  All
    # controllers will build a kinematic chain from this link up to
    # end_effector_link.  It's also the reference frame for the superposition
    # of error components in all controllers.
    robot_base_link: "base_link"

    joints:
      - joint1
      - joint2
      - joint3
      - joint4
      - joint5
      - joint6

    # Choose between position or velocity.  In fact, the controllers allow to
    # set both at the same time, but not all drivers will support this.
    # In general, position control is a little smoother due to the double
    # time-integrated commands from the solver. If available on a robot, it
    # should be the default.  On some drivers, the velocity interface provides
    # faster control cycles, and hence could improve stability in
    # contact-dominated tasks.  A drawback is that we lose one time integration
    # step here and obtain noisier command signals in comparison to the
    # position interface.  It's probably suitable to test both on a new robot
    # and decide for what works best.
    command_interfaces:
      - position
        #- velocity

    solver:
        error_scale: 1.0
        iterations: 10

    pd_gains:
        trans_x: {p: 1.0}
        trans_y: {p: 1.0}
        trans_z: {p: 1.0}
        rot_x: {p: 0.5}
        rot_y: {p: 0.5}
        rot_z: {p: 0.5}

motion_control_handle:
  ros__parameters:
    end_effector_link: "tool0"
    robot_base_link: "base_link"
    ft_sensor_ref_link: "tool0"
    joints:
      - joint1
      - joint2
      - joint3
      - joint4
      - joint5
      - joint6

joint_trajectory_controller:
  ros__parameters:
    joints:
      - joint1
      - joint2
      - joint3
      - joint4
      - joint5
      - joint6
    command_interfaces:
      - position
    state_interfaces:
      - position
      - velocity

